import Head from 'next/head'
import styles from '../../styles/ItemDetail.module.css'
import { useRouter } from 'next/router'
import cookieCutter from 'cookie-cutter'
import axios from 'axios';
import React, { useState, useEffect } from 'react'
import { Divider, Navbar, ImageSlider, BackToTopButton } from '../../Components/MyComponents'
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import {
    faPlus,
    faMinus
} from "@fortawesome/free-solid-svg-icons";


export default function ItemDetail() {
    const [selectedSize, setSelectedSizeState] = useState(0);
    const [selectedColor, setSelectedColorState] = useState(0);
    const [dataState, setDataState] = useState({});
    const [quantity, setQuantity] = useState(1);
    const [gotData, setGotData] = useState(false);
    const [totalStockForSelectedColor, setTotalStockForSelectedColor] = useState(0);
    const router = useRouter();

    function StartSelectedColor() {
        if (gotData) {
            for (let i = 0; i < dataState.size.length; i++) {
                if (getTotalStockForSize(i) > 0) {
                    setSelectedSize(i);
                    break;
                }
            }
        }
    }

    function setCookie() {
        var cookieVal = cookieCutter.get('Cart');
        var cookieArray;
        var same = false;
        if (cookieVal) {
            cookieArray = JSON.parse(cookieVal);
            for (var i = 0; i < cookieArray.length; i++) {
                if (cookieArray[i].id == Order[0].id) {
                    if (cookieArray[i].size == Order[0].size) {
                        if (cookieArray[i].color == Order[0].color) {
                            var newQuantity = Order[0].quantity + cookieArray[i].quantity;
                            if (newQuantity <= dataState.size[selectedSize].color[selectedColor].stock) {
                                Order[0].quantity = newQuantity;
                                cookieArray[i] = Order[0];
                                same=true;
                            }
                            else {
                                alert('No more stock, check cart!');
                                same=true;
                            }
                            break;
                        }
                    }
                }
            }
            if(!same){
                cookieArray.push(Order[0]);
            }
            cookieCutter.set('Cart', JSON.stringify(cookieArray))
        }
        else {
            cookieCutter.set('Cart', JSON.stringify(Order))
        }
    }
    function setSelectedColor(e) {
        setSelectedColorState(e);
        setQuantity(1);
    }

    function setSelectedSize(e) {
        if (gotData) {
            if (getTotalStockForSize(e) == 0) {
                alert("No Stock");
                return;
            }
            else {
                for (let i = 0; i < dataState.size[e].color.length; i++) {
                    if (dataState.size[e].color[i].stock > 0) {
                        setSelectedColor(i);
                        setQuantity(1);
                        break;
                    }
                }
                setSelectedSizeState(e);
            }
        }
    }
    function getTotalStockForSize(e) {
        if (gotData) {
            let stock = 0;
            for (let i = 0; i < dataState.size[e].color.length; i++) {
                if (dataState.size[e].color[i].stock > 0) {
                    stock = stock + dataState.size[e].color[i].stock;
                }
            }
            setTotalStockForSelectedColor(stock);
            return stock;
        }
    }
    let Order = [{
        id: "",
        quantity: "",
        size: "",
        color: "",
    }];
    function placeOrder() {
        Order[0].id = dataState._id;
        Order[0].color = dataState.size[selectedSize].color[selectedColor].name;
        Order[0].size = dataState.size[selectedSize].name;
        Order[0].quantity = quantity;
        setCookie();
    }


    useEffect(() => {
        if (router.isReady) {
            const { id } = router.query;
            if (id && id != null && id.length > 0) {
                FindProduct(id);
            }
        }
    }, [router.isReady]);

    function FindProduct(id) {
        axios.get(`http://localhost:1000/findProduct/` + id).then((response) => {
            if (response.data.product) {
                setGotData(true);
                setDataState(response.data.product);
                StartSelectedColor();
            }
        });
    }


    return (
        <div className={styles.container}>
            <Head>
                <title>Item Detail</title>
                <meta name="description" content="Generated by create next app" />
                <link rel="icon" href="/favicon.ico" />
            </Head>

            <main className={styles.main}>
                <Navbar />
                <BackToTopButton />
                {gotData === true ?
                    <div className={styles.parentCon}>
                        <div className={styles.ImageSliderCon}>
                            <ImageSlider imageSrc={dataState.imageSrc} />
                        </div>
                        <div className={styles.InfoCon}>
                            <h2 className={styles.productID}>ID: {dataState._id}</h2>
                            <h2 className={styles.productTitle}>{dataState.name}</h2>
                            <div className={styles.productPriceCon}>
                                <h2 className={styles.productPrice}>{dataState.price}RS</h2>
                                {dataState.oldPrice ?
                                    <h2 className={styles.productOldPrice}>{dataState.oldPrice}RS</h2>
                                    : null}
                            </div>
                            <Divider title="Description" dividerClassname={styles.divider} />
                            <h2 className={styles.productDescription}>{dataState.description}</h2>

                            <Divider title="Sizes" dividerClassname={styles.divider} />
                            <div className={styles.SizeCon}>
                                {dataState.size.map((data, i) => {
                                    let stock = 0;
                                    for (let i = 0; i < data.color.length; i++) {
                                        if (data.color[i].stock > 0) {
                                            stock = stock + data.color[i].stock;
                                        }
                                    }
                                    return (
                                        <div key={i} onClick={() => setSelectedSize(i)} className={selectedSize == i ? styles.sizeStyle + " " + styles.sizeSelectedStyle : stock > 0 ? styles.sizeStyle : styles.sizeStyleNoStock + " " + styles.sizeStyle}>{data.name}</div>
                                    )
                                })}
                            </div>

                            <Divider title="Colors" dividerClassname={styles.colorDivider} />

                            <div className={styles.SizeCon}>
                                {dataState.size[selectedSize].color.map((data, i) => {
                                    return (
                                        <div key={i} onClick={data.stock > 0 ? () => setSelectedColor(i) : () => alert('No Stock')} className={selectedColor == i ? styles.colorStyle + " " + styles.colorSelectedStyle : data.stock > 0 ? styles.colorStyle : styles.colorStyle + " " + styles.colorStyleNoStock}>{data.name}</div>
                                    )
                                })}
                            </div>

                            <Divider title="Quantity" dividerClassname={styles.colorDivider} />

                            <div className={styles.quantityCon}>
                                <FontAwesomeIcon
                                    className={styles.quantityIcon}
                                    icon={faMinus} onClick={quantity > 1 ? () => setQuantity(quantity - 1) : null} />
                                <h1 className={styles.quantityText}>{quantity}</h1>
                                <FontAwesomeIcon
                                    onClick={quantity < dataState.size[selectedSize].color[selectedColor].stock ? () => setQuantity(quantity + 1) : () => alert("No More Stock")}
                                    className={styles.quantityIcon}
                                    icon={faPlus} />
                            </div>

                            <h1 className={styles.addToCartBtn} onClick={() => placeOrder()}>
                                Add To Cart
                            </h1>


                        </div>

                    </div>

                    : null}

            </main>

            <style global jsx>{`
            body {
               margin: 0px !important;
               padding: 0px !important;

            }`}</style>
        </div>

    )
}